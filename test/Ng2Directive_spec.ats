import angular from 'angular';
import mock from 'angularMocks';

import {Ng2Directive, SelectorMatcher, Ng2DirectiveDefinitionObject, Ng2DDOFactory} from '../src/Ng2Directive'

class Hello {
  constructor() {
  }
}

describe("SelectorMatcher", function() {
  var selectorMatcher;
  describe("element", function() {
    beforeEach(function() {
      selectorMatcher = new SelectorMatcher("hello");
    });

    it("should be restricted to an element", function() {
      expect(selectorMatcher.restrict).toEqual('E');
    });

    it("should have the right name", function() {
      expect(selectorMatcher.name).toEqual('hello');
    });
  });
  describe("attribute", function() {
    beforeEach(function() {
      selectorMatcher = new SelectorMatcher("[hello]");
    });

    it("should be restricted to an element", function() {
      expect(selectorMatcher.restrict).toEqual('A');
    });

    it("should have the right name", function() {
      expect(selectorMatcher.name).toEqual('hello');
    });
  });
  describe("class", function() {
    beforeEach(function() {
      selectorMatcher = new SelectorMatcher(".hello");
    });

    it("should be restricted to an element", function() {
      expect(selectorMatcher.restrict).toEqual('C');
    });

    it("should have the right name", function() {
      expect(selectorMatcher.name).toEqual('hello');
    });
  });
});

describe("DirectiveDefinitionObject", function() {
  var ng2DirectiveDefinitionObject, ng2Directive, ng2DDOFactory, ddoFactoryFn;

  describe("regular behavior", function() {
    beforeEach(function() {
      ng2Directive = new Ng2Directive({
        selector: "[attr]",
        bind: {
          'something': '='
        }
      });
      ng2DirectiveDefinitionObject = new Ng2DirectiveDefinitionObject(Hello, ng2Directive);
    });

    it("should have the right properties", function() {
      expect(ng2DirectiveDefinitionObject.restrict).toEqual("A");
      expect(ng2DirectiveDefinitionObject.name).toEqual("attr");
      expect(ng2DirectiveDefinitionObject.controllerAs).toEqual("attr");
      expect(ng2DirectiveDefinitionObject.bindToController).toEqual({
        'something': '='
      });
      expect(ng2DirectiveDefinitionObject.controller).toEqual(Hello);
      expect(ng2DirectiveDefinitionObject.scope).toEqual({});
      expect(ng2DirectiveDefinitionObject.template).toBe(undefined);
      expect(ng2DirectiveDefinitionObject.templateUrl).toBe(undefined);
      expect(ng2DirectiveDefinitionObject.require).toBe(undefined);
      expect(ng2DirectiveDefinitionObject.transclude).toBe(undefined);
    });

    describe("as Factory", function() {
      beforeEach(function() {
        ng2DDOFactory = new Ng2DDOFactory(ng2DirectiveDefinitionObject);
        ddoFactoryFn = ng2DDOFactory.factoryFn;
      });

      it("should build a factory function that returns the right DDO", function() {
        expect(ddoFactoryFn()).toEqual({
          scope: {},
          restrict: "A",
          controllerAs: "attr",
          bindToController: {
            'something': "="
          },
          require: undefined,
          transclude: undefined,
          controller: Hello,
          template: undefined,
          templateUrl: undefined
        });
      });
    });
  });

  describe("with ng1 customizations", function() {
    beforeEach(function() {
      ng2Directive = new Ng2Directive({
        selector: "[attr]",
        bind: {
          'something': '='
        },
        controllerAs: "awesome",
        require: "power"
      });
      ng2DirectiveDefinitionObject = new Ng2DirectiveDefinitionObject(Hello, ng2Directive);
    });

    it("should have the right properties", function() {
      expect(ng2DirectiveDefinitionObject.restrict).toEqual("A");
      expect(ng2DirectiveDefinitionObject.name).toEqual("attr");
      expect(ng2DirectiveDefinitionObject.controllerAs).toEqual("awesome");
      expect(ng2DirectiveDefinitionObject.bindToController).toEqual({
        'something': '='
      });
      expect(ng2DirectiveDefinitionObject.controller).toEqual(Hello);
      expect(ng2DirectiveDefinitionObject.scope).toEqual({});
      expect(ng2DirectiveDefinitionObject.template).toBe(undefined);
      expect(ng2DirectiveDefinitionObject.templateUrl).toBe(undefined);
      expect(ng2DirectiveDefinitionObject.require).toBe("power");
      expect(ng2DirectiveDefinitionObject.transclude).toBe(undefined);

    });

    describe("as Factory", function() {
      beforeEach(function() {
        ng2DDOFactory = new Ng2DDOFactory(ng2DirectiveDefinitionObject);
        ddoFactoryFn = ng2DDOFactory.factoryFn;
      });

      it("should build a factory function that returns the right DDO", function() {
        expect(ddoFactoryFn()).toEqual({
          scope: {},
          restrict: "A",
          controllerAs: "awesome",
          bindToController: {
            'something': "="
          },
          require: "power",
          transclude: undefined,
          controller: Hello,
          template: undefined,
          templateUrl: undefined
        });
      });
    });
  });

});
